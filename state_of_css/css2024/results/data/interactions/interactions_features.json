{
  "dataAPI": {
    "surveys": {
      "state_of_css": {
        "css2024": {
          "interactions": {
            "interactions_features": [
              {
                "id": "scroll_snap",
                "entity": {
                  "name": "Scroll Snap",
                  "nameClean": "Scroll Snap",
                  "entityType": "feature",
                  "description": "`scroll-snap-type`, `scroll-snap-align`, `scroll-padding`…\n",
                  "descriptionClean": "scroll-snap-type, scroll-snap-align, scroll-padding…",
                  "descriptionHtml": "<code>scroll-snap-type</code>, <code>scroll-snap-align</code>, <code>scroll-padding</code>…\n",
                  "caniuse": {
                    "name": "css-snappoints",
                    "url": "https://caniuse.com/css-snappoints"
                  },
                  "mdn": {
                    "locale": "en-US",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_scroll_snap",
                    "title": "CSS scroll snap",
                    "summary": "The CSS scroll snap module provides properties that let you control the panning and scrolling behavior by defining snap positions. Content can be snapped into position as the user scrolls overflowing content within a scroll container, providing paging and scroll positioning."
                  },
                  "example": {
                    "language": "css",
                    "code": ".scroller {\n  height: 300px;\n  overflow-y: scroll;\n  scroll-snap-type: y mandatory;\n}\n\n.scroller section {\n  scroll-snap-align: start;\n}\n",
                    "codeHighlighted": "<span class=\"hljs-selector-class\">.scroller</span> {\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n  <span class=\"hljs-attribute\">overflow-y</span>: scroll;\n  <span class=\"hljs-attribute\">scroll-snap-type</span>: y mandatory;\n}\n\n<span class=\"hljs-selector-class\">.scroller</span> <span class=\"hljs-selector-tag\">section</span> {\n  <span class=\"hljs-attribute\">scroll-snap-align</span>: start;\n}"
                  }
                }
              },
              {
                "id": "overscroll_behavior",
                "entity": {
                  "name": "`overscroll-behavior`",
                  "nameClean": "overscroll-behavior",
                  "nameHtml": "<code>overscroll-behavior</code>",
                  "entityType": "feature",
                  "caniuse": {
                    "name": "css-overscroll-behavior",
                    "url": "https://caniuse.com/css-overscroll-behavior"
                  },
                  "mdn": {
                    "locale": "en-US",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior",
                    "title": "overscroll-behavior",
                    "summary": "The overscroll-behavior CSS property sets what a browser does when reaching the boundary of a scrolling area."
                  },
                  "example": {
                    "language": "css",
                    "code": ".foo {\n  height: 200px;\n  overflow: auto;\n  overscroll-behavior-y: contain;\n}\n",
                    "codeHighlighted": "<span class=\"hljs-selector-class\">.foo</span> {\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;\n  <span class=\"hljs-attribute\">overflow</span>: auto;\n  overscroll-behavior-y: contain;\n}"
                  }
                }
              },
              {
                "id": "scroll_behavior",
                "entity": {
                  "name": "`scroll-behavior`",
                  "nameClean": "scroll-behavior",
                  "nameHtml": "<code>scroll-behavior</code>",
                  "entityType": "feature",
                  "caniuse": {
                    "name": "css-scroll-behavior",
                    "url": "https://caniuse.com/css-scroll-behavior"
                  },
                  "mdn": {
                    "locale": "en-US",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior",
                    "title": "scroll-behavior",
                    "summary": "The scroll-behavior CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs."
                  },
                  "example": {
                    "language": "css",
                    "code": ".foo {\n  scroll-behavior: auto;\n  scroll-behavior: smooth;\n}\n",
                    "codeHighlighted": "<span class=\"hljs-selector-class\">.foo</span> {\n  scroll-behavior: auto;\n  scroll-behavior: smooth;\n}"
                  }
                }
              },
              {
                "id": "scrollbar_gutter",
                "entity": {
                  "name": "`scrollbar-gutter`",
                  "nameClean": "scrollbar-gutter",
                  "nameHtml": "<code>scrollbar-gutter</code>",
                  "entityType": "feature",
                  "caniuse": {
                    "name": "mdn-css_properties_scrollbar-gutter",
                    "url": "https://caniuse.com/mdn-css_properties_scrollbar-gutter"
                  },
                  "mdn": {
                    "locale": "en-US",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-gutter",
                    "title": "scrollbar-gutter",
                    "summary": "The scrollbar-gutter CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed."
                  },
                  "example": {
                    "language": "css",
                    "code": ".container {\n  scrollbar-gutter: stable;\n}\n",
                    "codeHighlighted": "<span class=\"hljs-selector-class\">.container</span> {\n  <span class=\"hljs-attribute\">scrollbar-gutter</span>: stable;\n}"
                  }
                }
              },
              {
                "id": "view_transitions",
                "entity": {
                  "name": "ViewTransition API",
                  "nameClean": "ViewTransition API",
                  "entityType": "feature",
                  "caniuse": {
                    "name": "mdn-api_viewtransition",
                    "url": "https://caniuse.com/mdn-api_viewtransition"
                  },
                  "mdn": {
                    "locale": "en-US",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API",
                    "title": "View Transitions API",
                    "summary": "The View Transitions API provides a mechanism for easily creating animated transitions between different website views. This includes animating between DOM states in a single-page app (SPA), and animating the navigation between documents in a multi-page app (MPA)."
                  },
                  "example": {
                    "language": "css",
                    "code": "::view-transition-old(main-image),\n::view-transition-new(main-image) {\n  transform-origin: right top;\n}\n\n::view-transition-new(main-image) {\n  animation: 400ms ease-out both grow;\n}\n\nfigure {\n  view-transition-name: main-image;\n}\n",
                    "codeHighlighted": "::<span class=\"hljs-built_in\">view-transition-old</span>(main-image),\n::<span class=\"hljs-built_in\">view-transition-new</span>(main-image) {\n  <span class=\"hljs-attribute\">transform-origin</span>: right top;\n}\n\n::<span class=\"hljs-built_in\">view-transition-new</span>(main-image) {\n  <span class=\"hljs-attribute\">animation</span>: <span class=\"hljs-number\">400ms</span> ease-out both grow;\n}\n\n<span class=\"hljs-selector-tag\">figure</span> {\n  view-<span class=\"hljs-attribute\">transition</span>-name: main-image;\n}"
                  }
                }
              },
              {
                "id": "scroll_timeline",
                "entity": {
                  "name": "`scroll-timeline`",
                  "nameClean": "scroll-timeline",
                  "nameHtml": "<code>scroll-timeline</code>",
                  "entityType": "feature",
                  "caniuse": {
                    "name": "css-scroll-timeline",
                    "url": "https://caniuse.com/css-scroll-timeline"
                  },
                  "mdn": {
                    "locale": "en-US",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-timeline",
                    "title": "scroll-timeline",
                    "summary": "The scroll-timeline CSS shorthand property is used to define a named scroll progress timeline, which is progressed through by scrolling a scrollable element (scroller) between top and bottom (or left and right). scroll-timeline is set on the scroller that will provide the timeline. The starting scroll position represents 0% progress and the ending scroll position represents 100% progress. If the 0% position and 100% position coincide (i.e., the scroll container has no overflow to scroll), the timeline is inactive."
                  },
                  "example": {
                    "language": "css",
                    "code": "#container {\n  height: 300px;\n  overflow-y: scroll;\n  scroll-timeline: --squareTimeline y;\n  position: relative;\n}\n",
                    "codeHighlighted": "<span class=\"hljs-selector-id\">#container</span> {\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n  <span class=\"hljs-attribute\">overflow-y</span>: scroll;\n  scroll-timeline: --squareTimeline y;\n  <span class=\"hljs-attribute\">position</span>: relative;\n}"
                  }
                },
                "comments": {
                  "currentEdition": {
                    "count": 1
                  }
                }
              },
              {
                "id": "view_timeline",
                "entity": {
                  "name": "`view-timeline`",
                  "nameClean": "view-timeline",
                  "nameHtml": "<code>view-timeline</code>",
                  "entityType": "feature",
                  "caniuse": {
                    "name": "css-view-timeline",
                    "url": "https://caniuse.com/css-view-timeline"
                  },
                  "mdn": {
                    "locale": "en-US",
                    "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/view-timeline",
                    "title": "view-timeline",
                    "summary": "The view-timeline CSS shorthand property is used to define a named view progress timeline, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline is set on the subject."
                  },
                  "example": {
                    "language": "css",
                    "code": ".animation {\n  view-timeline: --subjectReveal block;\n  animation-name: appear;\n  animation-fill-mode: both;\n  animation-duration: 1ms;\n}\n",
                    "codeHighlighted": "<span class=\"hljs-selector-class\">.animation</span> {\n  view-timeline: --subjectReveal block;\n  <span class=\"hljs-attribute\">animation-name</span>: appear;\n  <span class=\"hljs-attribute\">animation-fill-mode</span>: both;\n  <span class=\"hljs-attribute\">animation-duration</span>: <span class=\"hljs-number\">1ms</span>;\n}"
                  }
                }
              },
              {
                "id": "discrete_properties_animations",
                "entity": {
                  "name": "Discrete Properties Animations",
                  "nameClean": "Discrete Properties Animations",
                  "entityType": "feature",
                  "description": "Animate to and from properties such as `display: none`\n",
                  "descriptionClean": "Animate to and from properties such as display: none",
                  "descriptionHtml": "Animate to and from properties such as <code>display: none</code>\n",
                  "example": {
                    "language": "css",
                    "code": "/*   IS-OPEN STATE   */\ndialog[open] {\n  translate: 0 0;\n}\n\n/*   EXIT STATE   */\ndialog {\n  transition: translate 0.7s ease-out, display 0.7s ease-out allow-discrete;\n  translate: 0 100vh;\n}\n\n/*   0. BEFORE-OPEN STATE   */\n@starting-style {\n  dialog[open] {\n    translate: 0 100vh;\n  }\n}\n",
                    "codeHighlighted": "<span class=\"hljs-comment\">/*   IS-OPEN STATE   */</span>\ndialog<span class=\"hljs-selector-attr\">[open]</span> {\n  translate: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">/*   EXIT STATE   */</span>\ndialog {\n  <span class=\"hljs-attribute\">transition</span>: translate <span class=\"hljs-number\">0.7s</span> ease-out, display <span class=\"hljs-number\">0.7s</span> ease-out allow-discrete;\n  translate: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100vh</span>;\n}\n\n<span class=\"hljs-comment\">/*   0. BEFORE-OPEN STATE   */</span>\n<span class=\"hljs-keyword\">@starting-style</span> {\n  dialog<span class=\"hljs-selector-attr\">[open]</span> {\n    translate: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100vh</span>;\n  }\n}"
                  }
                }
              }
            ]
          }
        }
      }
    }
  }
}