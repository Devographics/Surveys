{
  "dataAPI": {
    "surveys": {
      "state_of_js": {
        "js2024": {
          "features": {
            "object_features": {
              "id": "object_features",
              "comments": {
                "currentEdition": {
                  "count": 18
                }
              },
              "responses": {
                "currentEdition": {
                  "_metadata": {
                    "axis1Sort": {
                      "property": "count",
                      "order": "desc"
                    },
                    "limit": 50,
                    "cutoff": 10
                  },
                  "completion": {
                    "count": 10919,
                    "percentageSurvey": 77.91,
                    "total": 14015
                  },
                  "buckets": [
                    {
                      "count": 3620,
                      "id": "object_group_by",
                      "percentageQuestion": 33.15,
                      "percentageSurvey": 25.83,
                      "entity": {
                        "name": "`Object.groupBy()`\n",
                        "nameHtml": "<code>Object.groupBy()</code>\n",
                        "nameClean": "Object.groupBy()",
                        "description": "Group the elements of a given iterable according to the string values returned by a provided function.\n",
                        "descriptionClean": "Group the elements of a given iterable according to the string values returned by a provided function.\n",
                        "id": "object_group_by",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const inventory = [\n  { name: \"salad\", type: \"vegetables\" },\n  { name: \"banana\", type: \"fruit\" },\n  { name: \"apple\", type: \"fruit\" },\n];\n\nconst result = Object.groupBy(inventory, ({ type }) => type);\n\n/*\n{\n  vegetables: [\n    { name: 'salad', type: 'vegetables' },\n  ],\n  fruit: [\n    { name: \"banana\", type: \"fruit\" },\n    { name: \"apple\", type: \"fruit\" }\n  ]\n}\n*/\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> inventory = [\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;salad&quot;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;vegetables&quot;</span> },\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;banana&quot;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;fruit&quot;</span> },\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;apple&quot;</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;fruit&quot;</span> },\n];\n\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">groupBy</span>(inventory, <span class=\"hljs-function\">(<span class=\"hljs-params\">{ type }</span>) =&gt;</span> type);\n\n<span class=\"hljs-comment\">/*\n{\n  vegetables: [\n    { name: &#x27;salad&#x27;, type: &#x27;vegetables&#x27; },\n  ],\n  fruit: [\n    { name: &quot;banana&quot;, type: &quot;fruit&quot; },\n    { name: &quot;apple&quot;, type: &quot;fruit&quot; }\n  ]\n}\n*/</span>"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/union"
                        },
                        "webFeature": {
                          "id": "set-methods",
                          "description_html": "The <code>difference()</code>, <code>intersection()</code>, <code>isDisjointFrom()</code>, <code>isSubsetOf()</code>, <code>isSupersetOf()</code>, <code>symmetricDifference()</code>, and <code>union()</code> methods of the JavaScript <code>Set</code> object performs operations between two sets.",
                          "group": [
                            "sets"
                          ],
                          "name": "Set methods",
                          "spec": [
                            "https://tc39.es/proposal-set-methods/"
                          ],
                          "status": {
                            "baseline": "low",
                            "baseline_low_date": "2024-06-11",
                            "support": {
                              "chrome": "122",
                              "chrome_android": "122",
                              "edge": "122",
                              "firefox": "127",
                              "firefox_android": "127",
                              "safari": "17",
                              "safari_ios": "17"
                            }
                          }
                        }
                      }
                    },
                    {
                      "count": 7299,
                      "id": "na",
                      "percentageQuestion": 66.85,
                      "percentageSurvey": 52.08
                    },
                    {
                      "count": 3096,
                      "id": "no_answer",
                      "percentageQuestion": 0,
                      "percentageSurvey": 22.09
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}