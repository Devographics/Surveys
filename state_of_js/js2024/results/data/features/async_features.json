{
  "dataAPI": {
    "surveys": {
      "state_of_js": {
        "js2024": {
          "features": {
            "async_features": {
              "id": "async_features",
              "comments": {
                "currentEdition": {
                  "count": 10
                }
              },
              "responses": {
                "currentEdition": {
                  "_metadata": {
                    "axis1Sort": {
                      "property": "count",
                      "order": "desc"
                    },
                    "limit": 50,
                    "cutoff": 10
                  },
                  "completion": {
                    "count": 10648,
                    "percentageSurvey": 87.74,
                    "total": 12136
                  },
                  "buckets": [
                    {
                      "count": 5144,
                      "id": "promise_all_settled",
                      "percentageQuestion": 48.31,
                      "percentageSurvey": 42.39,
                      "entity": {
                        "name": "`Promise.allSettled()`",
                        "nameHtml": "<code>Promise.allSettled()</code>",
                        "nameClean": "Promise.allSettled()",
                        "description": "Returns a single Promise that fulfills when all of the input's promises fulfills.\n",
                        "descriptionHtml": "Returns a single Promise that fulfills when all of the input's promises fulfills.\n",
                        "descriptionClean": "Returns a single Promise that fulfills when all of the input's promises fulfills.",
                        "id": "promise_all_settled",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const promises = [promise1, promise2];\n\nPromise.allSettled(promises).then((results) =>\n  results.forEach((result) => console.log(result.status)),\n);\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> promises = [promise1, promise2];\n\n<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">allSettled</span>(promises).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">results</span>) =&gt;</span>\n  results.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result.<span class=\"hljs-property\">status</span>)),\n);"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled"
                        },
                        "webFeature": {
                          "id": "promise-allsettled",
                          "description_html": "The <code>Promise.allSettled()</code> static method waits for an array of promises to settle (resolve or reject).",
                          "group": [
                            "promises"
                          ],
                          "name": "Promise.allSettled()",
                          "spec": [
                            "https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.allsettled"
                          ],
                          "status": {
                            "baseline": "high",
                            "baseline_low_date": "2020-07-28",
                            "support": {
                              "chrome": "76",
                              "chrome_android": "76",
                              "edge": "79",
                              "firefox": "71",
                              "firefox_android": "79",
                              "safari": "13",
                              "safari_ios": "13"
                            }
                          }
                        }
                      }
                    },
                    {
                      "count": 4653,
                      "id": "promise_any",
                      "percentageQuestion": 43.7,
                      "percentageSurvey": 38.34,
                      "entity": {
                        "name": "`Promise.any()`",
                        "nameHtml": "<code>Promise.any()</code>",
                        "nameClean": "Promise.any()",
                        "description": "Returns a single Promise that fulfills when any of the input's promises fulfills.\n",
                        "descriptionHtml": "Returns a single Promise that fulfills when any of the input's promises fulfills.\n",
                        "descriptionClean": "Returns a single Promise that fulfills when any of the input's promises fulfills.",
                        "id": "promise_any",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const promises = [promise1, promise2, promise3];\n\nPromise.any(promises).then((value) => console.log(value));\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> promises = [promise1, promise2, promise3];\n\n<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">any</span>(promises).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value));"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any"
                        },
                        "caniuse": {
                          "url": "https://caniuse.com/mdn-javascript_builtins_promise_any"
                        },
                        "webFeature": {
                          "id": "promise-any",
                          "description_html": "The <code>Promise.any()</code> static method returns a promise that fulfills as soon as the first of an iterable of promises fulfills, with that promise's value. Otherwise, it rejects with an <code>AggregateError</code> when all of the promises have rejected.",
                          "group": [
                            "promises"
                          ],
                          "name": "Promise.any()",
                          "spec": [
                            "https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise.any"
                          ],
                          "status": {
                            "baseline": "high",
                            "baseline_low_date": "2020-09-16",
                            "support": {
                              "chrome": "85",
                              "chrome_android": "85",
                              "edge": "85",
                              "firefox": "79",
                              "firefox_android": "79",
                              "safari": "14",
                              "safari_ios": "14"
                            }
                          }
                        }
                      }
                    },
                    {
                      "count": 1613,
                      "id": "promise_try",
                      "percentageQuestion": 15.15,
                      "percentageSurvey": 13.29,
                      "entity": {
                        "name": "`Promise.try()`",
                        "nameHtml": "<code>Promise.try()</code>",
                        "nameClean": "Promise.try()",
                        "description": "Take a callback of any kind and wrap its result in a Promise.\n",
                        "descriptionClean": "Take a callback of any kind and wrap its result in a Promise.\n",
                        "id": "promise_try",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "function doSomething(action) {\n  return Promise.try(action)\n    .then((result) => console.log(result))\n    .catch((error) => console.error(error))\n    .finally(() => console.log(\"Done\"));\n}\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doSomething</span>(<span class=\"hljs-params\">action</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">try</span>(action)\n    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result))\n    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error))\n    .<span class=\"hljs-title function_\">finally</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Done&quot;</span>));\n}"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/try"
                        },
                        "caniuse": {
                          "url": "https://caniuse.com/javascript_builtins_promise_try"
                        },
                        "webFeature": {
                          "id": "promise-try",
                          "description_html": "The <code>Promise.try()</code> static method returns a promise that takes a callback of any kind (returns or throws, synchronously or asynchronously) and wraps its result in a <code>Promise</code>.",
                          "group": [
                            "promises"
                          ],
                          "name": "Promise.try()",
                          "spec": [
                            "https://tc39.es/proposal-promise-try/"
                          ],
                          "status": {
                            "baseline": "false",
                            "support": {
                              "chrome": "128",
                              "chrome_android": "128",
                              "edge": "128"
                            }
                          }
                        }
                      }
                    },
                    {
                      "count": 13,
                      "id": "top_level_await",
                      "percentageQuestion": 0.12,
                      "percentageSurvey": 0.11,
                      "entity": {
                        "name": "Top-level `await`",
                        "nameHtml": "Top-level <code>await</code>",
                        "nameClean": "Top-level await",
                        "id": "top_level_await",
                        "entityType": "feature",
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"
                        }
                      }
                    },
                    {
                      "count": 3290,
                      "id": "na",
                      "percentageQuestion": 30.9,
                      "percentageSurvey": 27.11
                    },
                    {
                      "count": 1488,
                      "id": "no_answer",
                      "percentageQuestion": 0,
                      "percentageSurvey": 12.26
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}