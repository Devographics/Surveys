{
  "dataAPI": {
    "surveys": {
      "state_of_js": {
        "js2024": {
          "features": {
            "syntax_features": {
              "id": "syntax_features",
              "comments": {
                "currentEdition": {
                  "count": 7
                }
              },
              "responses": {
                "currentEdition": {
                  "_metadata": {
                    "axis1Sort": {
                      "property": "count",
                      "order": "desc"
                    },
                    "limit": 50,
                    "cutoff": 10
                  },
                  "completion": {
                    "count": 12892,
                    "percentageSurvey": 96.19,
                    "total": 13403
                  },
                  "buckets": [
                    {
                      "count": 11002,
                      "id": "nullish_coalescing",
                      "percentageQuestion": 85.34,
                      "percentageSurvey": 82.09,
                      "entity": {
                        "name": "Nullish Coalescing",
                        "nameClean": "Nullish Coalescing",
                        "description": "Return first value, or second value if first value is `null` or `undefined`.\n",
                        "descriptionHtml": "Return first value, or second value if first value is <code>null</code> or <code>undefined</code>.\n",
                        "descriptionClean": "Return first value, or second value if first value is null or undefined.",
                        "id": "nullish_coalescing",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const foo = null ?? 'default string';\nconsole.log(foo);\n// expected output: \"default string\"\n\nconst baz = 0 ?? 42;\nconsole.log(baz);\n// expected output: 0\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-literal\">null</span> ?? <span class=\"hljs-string\">&#x27;default string&#x27;</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo);\n<span class=\"hljs-comment\">// expected output: &quot;default string&quot;</span>\n\n<span class=\"hljs-keyword\">const</span> baz = <span class=\"hljs-number\">0</span> ?? <span class=\"hljs-number\">42</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(baz);\n<span class=\"hljs-comment\">// expected output: 0</span>"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing"
                        }
                      }
                    },
                    {
                      "count": 8686,
                      "id": "dynamic_import",
                      "percentageQuestion": 67.38,
                      "percentageSurvey": 64.81,
                      "entity": {
                        "name": "Dynamic Import",
                        "nameClean": "Dynamic Import",
                        "description": "Load a module asynchronously and dynamically.\n",
                        "descriptionClean": "Load a module asynchronously and dynamically.\n",
                        "id": "dynamic_import",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "await import('/modules/my-module.js')\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;/modules/my-module.js&#x27;</span>)"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import"
                        }
                      }
                    },
                    {
                      "count": 5829,
                      "id": "private_fields",
                      "percentageQuestion": 45.21,
                      "percentageSurvey": 43.49,
                      "entity": {
                        "name": "Private Properties",
                        "nameClean": "Private Properties",
                        "description": "Properties that cannot be legally referenced outside of the class.\n",
                        "descriptionClean": "Properties that cannot be legally referenced outside of the class.\n",
                        "id": "private_fields",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "class ClassWithPrivateField {\n  #privateField\n}\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClassWithPrivateField</span> {\n  #privateField\n}"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties"
                        }
                      }
                    },
                    {
                      "count": 5631,
                      "id": "logical_assignment",
                      "percentageQuestion": 43.68,
                      "percentageSurvey": 42.01,
                      "entity": {
                        "name": "Logical Assignment",
                        "nameClean": "Logical Assignment",
                        "description": "Operators to assign a value to a variable based on its own truthy/falsy status.\n",
                        "descriptionClean": "Operators to assign a value to a variable based on its own truthy/falsy status.\n",
                        "id": "logical_assignment",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const a = { duration: 50, title: '' };\n\na.duration ||= 10;\nconsole.log(a.duration);\n// expected output: 50\n\na.title ||= 'title is empty.';\nconsole.log(a.title);\n// expected output: \"title is empty\"\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> a = { <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">50</span>, <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;&#x27;</span> };\n\na.<span class=\"hljs-property\">duration</span> ||= <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a.<span class=\"hljs-property\">duration</span>);\n<span class=\"hljs-comment\">// expected output: 50</span>\n\na.<span class=\"hljs-property\">title</span> ||= <span class=\"hljs-string\">&#x27;title is empty.&#x27;</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a.<span class=\"hljs-property\">title</span>);\n<span class=\"hljs-comment\">// expected output: &quot;title is empty&quot;</span>"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment"
                        },
                        "caniuse": {
                          "url": "https://caniuse.com/mdn-javascript_operators_logical_and_assignment"
                        }
                      }
                    },
                    {
                      "count": 2538,
                      "id": "hashbang_grammar",
                      "percentageQuestion": 19.69,
                      "percentageSurvey": 18.94,
                      "entity": {
                        "name": "Hashbang Grammar",
                        "nameClean": "Hashbang Grammar",
                        "description": "Provide the path to a specific JavaScript interpreter that you want to use to execute the script.\n",
                        "descriptionClean": "Provide the path to a specific JavaScript interpreter that you want to use to execute the script.\n",
                        "id": "hashbang_grammar",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "#!/usr/bin/env node\n\nconsole.log(\"Hello world\");\n",
                          "codeHighlighted": "<span class=\"hljs-meta\">#!/usr/bin/env node</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Hello world&quot;</span>);"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar"
                        }
                      }
                    },
                    {
                      "count": 2288,
                      "id": "error_cause",
                      "percentageQuestion": 17.75,
                      "percentageSurvey": 17.07,
                      "entity": {
                        "name": "`error.cause`",
                        "nameHtml": "<code>error.cause</code>",
                        "nameClean": "error.cause",
                        "description": "Indicate the specific original cause of the error.\n",
                        "descriptionClean": "Indicate the specific original cause of the error.\n",
                        "id": "error_cause",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "try {\n  connectToDatabase();\n} catch (err) {\n  throw new Error('Connecting to database failed.', { cause: err });\n}\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-title function_\">connectToDatabase</span>();\n} <span class=\"hljs-keyword\">catch</span> (err) {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Connecting to database failed.&#x27;</span>, { <span class=\"hljs-attr\">cause</span>: err });\n}"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause"
                        }
                      }
                    },
                    {
                      "count": 640,
                      "id": "na",
                      "percentageQuestion": 4.96,
                      "percentageSurvey": 4.78
                    },
                    {
                      "count": 511,
                      "id": "no_answer",
                      "percentageQuestion": 0,
                      "percentageSurvey": 3.81
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}