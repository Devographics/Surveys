{
  "dataAPI": {
    "surveys": {
      "state_of_js": {
        "js2024": {
          "features": {
            "string_features": {
              "id": "string_features",
              "comments": {
                "currentEdition": {
                  "count": 6
                }
              },
              "responses": {
                "currentEdition": {
                  "_metadata": {
                    "axis1Sort": {
                      "property": "count",
                      "order": "desc"
                    },
                    "limit": 50,
                    "cutoff": 10
                  },
                  "completion": {
                    "count": 13051,
                    "percentageSurvey": 93.12,
                    "total": 14015
                  },
                  "buckets": [
                    {
                      "count": 9859,
                      "id": "string_replace_all",
                      "percentageQuestion": 75.54,
                      "percentageSurvey": 70.35,
                      "entity": {
                        "name": "`string.replaceAll()`",
                        "nameHtml": "<code>string.replaceAll()</code>",
                        "nameClean": "string.replaceAll()",
                        "description": "Replace all instances of a string.\n",
                        "descriptionClean": "Replace all instances of a string.\n",
                        "id": "string_replace_all",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const s1 = \"foo_bar_baz\";\nconst s2 = s1.replaceAll('_', '-');\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> s1 = <span class=\"hljs-string\">&quot;foo_bar_baz&quot;</span>;\n<span class=\"hljs-keyword\">const</span> s2 = s1.<span class=\"hljs-title function_\">replaceAll</span>(<span class=\"hljs-string\">&#x27;_&#x27;</span>, <span class=\"hljs-string\">&#x27;-&#x27;</span>);"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll"
                        },
                        "caniuse": {
                          "url": "https://caniuse.com/mdn-javascript_builtins_string_replaceall"
                        },
                        "webFeature": {
                          "id": "string-replaceall",
                          "description_html": "The <code>replaceAll()</code> method of strings returns a new string where all matches of a pattern (a string or regular expression) have been substituted with a replacement string.",
                          "group": [
                            "string"
                          ],
                          "name": "String replaceAll()",
                          "spec": [
                            "https://tc39.es/ecma262/multipage/text-processing.html#sec-string-objects"
                          ],
                          "status": {
                            "baseline": "high",
                            "baseline_low_date": "2020-08-27",
                            "support": {
                              "chrome": "85",
                              "chrome_android": "85",
                              "edge": "85",
                              "firefox": "77",
                              "firefox_android": "79",
                              "safari": "13.1",
                              "safari_ios": "13.4"
                            }
                          }
                        }
                      }
                    },
                    {
                      "count": 5887,
                      "id": "string_match_all",
                      "percentageQuestion": 45.11,
                      "percentageSurvey": 42,
                      "entity": {
                        "name": "`string.matchAll()`",
                        "nameHtml": "<code>string.matchAll()</code>",
                        "nameClean": "string.matchAll()",
                        "description": "Return an iterator of all results matching this string against a regular expression.\n",
                        "descriptionClean": "Return an iterator of all results matching this string against a regular expression.\n",
                        "id": "string_match_all",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const regexp = /t(e)(st(\\d?))/g;\nconst str = 'test1test2';\nconst array = [...str.matchAll(regexp)];\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/t(e)(st(\\d?))/g</span>;\n<span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">&#x27;test1test2&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> array = [...str.<span class=\"hljs-title function_\">matchAll</span>(regexp)];"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll"
                        },
                        "caniuse": {
                          "url": "https://caniuse.com/mdn-javascript_builtins_string_matchall"
                        },
                        "webFeature": {
                          "id": "string-matchall",
                          "description_html": "The <code>matchAll()</code> method of strings matches a string against a regular expression and returns an iterator of all results, including capturing groups.",
                          "group": [
                            "string"
                          ],
                          "name": "String matchAll()",
                          "spec": [
                            "https://tc39.es/ecma262/multipage/text-processing.html#sec-string-objects"
                          ],
                          "status": {
                            "baseline": "high",
                            "baseline_low_date": "2020-01-15",
                            "support": {
                              "chrome": "73",
                              "chrome_android": "73",
                              "edge": "79",
                              "firefox": "67",
                              "firefox_android": "67",
                              "safari": "13",
                              "safari_ios": "13"
                            }
                          }
                        }
                      }
                    },
                    {
                      "count": 3534,
                      "id": "regexp_match_indices",
                      "percentageQuestion": 27.08,
                      "percentageSurvey": 25.22,
                      "entity": {
                        "name": "Regexp Match Indices",
                        "nameClean": "Regexp Match Indices",
                        "description": "Store the start and end positions of each matched capture group.\n",
                        "descriptionClean": "Store the start and end positions of each matched capture group.\n",
                        "id": "regexp_match_indices",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const str1 = \"foo bar foo\";\nconst regex1 = /foo/dg;\nconsole.log(regex1.exec(str1).indices[0]); // Output: Array [0, 2]\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> str1 = <span class=\"hljs-string\">&quot;foo bar foo&quot;</span>;\n<span class=\"hljs-keyword\">const</span> regex1 = <span class=\"hljs-regexp\">/foo/</span>dg;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(regex1.<span class=\"hljs-title function_\">exec</span>(str1).<span class=\"hljs-property\">indices</span>[<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">// Output: Array [0, 2]</span>"
                        },
                        "mdn": {
                          "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices"
                        },
                        "resources": [
                          {
                            "url": "https://v8.dev/features/regexp-match-indices",
                            "title": "RegExp match indices"
                          }
                        ]
                      }
                    },
                    {
                      "count": 2156,
                      "id": "na",
                      "percentageQuestion": 16.52,
                      "percentageSurvey": 15.38
                    },
                    {
                      "count": 964,
                      "id": "no_answer",
                      "percentageQuestion": 0,
                      "percentageSurvey": 6.88
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}