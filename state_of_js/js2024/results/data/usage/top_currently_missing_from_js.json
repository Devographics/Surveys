{
  "dataAPI": {
    "surveys": {
      "state_of_js": {
        "js2024": {
          "usage": {
            "top_currently_missing_from_js": {
              "id": "top_currently_missing_from_js",
              "comments": {
                "currentEdition": {
                  "count": 16
                }
              },
              "combined": {
                "currentEdition": {
                  "_metadata": {
                    "axis1Sort": {
                      "property": "count",
                      "order": "desc"
                    },
                    "limit": 20,
                    "cutoff": 10
                  },
                  "completion": {
                    "count": 7029,
                    "percentageSurvey": 73.04,
                    "total": 9623
                  },
                  "buckets": [
                    {
                      "count": 3738,
                      "id": "static_typing",
                      "percentageQuestion": 53.18,
                      "percentageSurvey": 38.84,
                      "entity": {
                        "name": "Static typing",
                        "nameClean": "Static typing",
                        "description": "Lack of native typing",
                        "descriptionClean": "Lack of native typing",
                        "id": "static_typing",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 3020,
                      "id": "standard_library",
                      "percentageQuestion": 42.96,
                      "percentageSurvey": 31.38,
                      "entity": {
                        "name": "Standard Library",
                        "nameClean": "Standard Library",
                        "id": "standard_library",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 2791,
                      "id": "js_signals",
                      "percentageQuestion": 39.71,
                      "percentageSurvey": 29,
                      "entity": {
                        "name": "Signals",
                        "nameClean": "Signals",
                        "description": "Used in reactive programming to remove the need to manage updating in applications.",
                        "descriptionClean": "Used in reactive programming to remove the need to manage updating in applications.",
                        "id": "js_signals",
                        "entityType": "feature",
                        "resources": [
                          {
                            "url": "https://github.com/tc39/proposal-signals",
                            "title": "Signals Proposal"
                          }
                        ]
                      }
                    },
                    {
                      "count": 1629,
                      "id": "js_pipeline_operator",
                      "percentageQuestion": 23.18,
                      "percentageSurvey": 16.93,
                      "entity": {
                        "name": "Pipe Operator (`|>`)\n",
                        "nameHtml": "Pipe Operator (<code>|&gt;</code>)\n",
                        "nameClean": "Pipe Operator (|)",
                        "description": "A new `|>` operator for passing the result of one function to another.",
                        "descriptionHtml": "A new <code>|&gt;</code> operator for passing the result of one function to another.",
                        "descriptionClean": "A new | operator for passing the result of one function to another.",
                        "id": "js_pipeline_operator",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const double = x => x * 2;\nconst triple = x => x * 3;\n\n10 |> double |> triple |> console.log\n// 60\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">double</span> = x =&gt; x * <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">triple</span> = x =&gt; x * <span class=\"hljs-number\">3</span>;\n\n<span class=\"hljs-number\">10</span> |&gt; double |&gt; triple |&gt; <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>\n<span class=\"hljs-comment\">// 60</span>"
                        },
                        "resources": [
                          {
                            "url": "https://github.com/tc39/proposal-pipeline-operator",
                            "title": "Pipe Operator (|>) for JavaScript Proposal"
                          }
                        ]
                      }
                    },
                    {
                      "count": 1366,
                      "id": "js_pattern_matching",
                      "percentageQuestion": 19.43,
                      "percentageSurvey": 14.2,
                      "entity": {
                        "name": "Pattern Matching",
                        "nameClean": "Pattern Matching",
                        "description": "A new `match` keyword for pattern-matching objects.",
                        "descriptionHtml": "A new <code>match</code> keyword for pattern-matching objects.",
                        "descriptionClean": "A new match keyword for pattern-matching objects.",
                        "id": "js_pattern_matching",
                        "entityType": "feature",
                        "resources": [
                          {
                            "url": "https://github.com/tc39/proposal-pattern-matching",
                            "title": "Pattern Matching Proposal"
                          }
                        ]
                      }
                    },
                    {
                      "count": 1331,
                      "id": "js_record_tuple",
                      "percentageQuestion": 18.94,
                      "percentageSurvey": 13.83,
                      "entity": {
                        "name": "`Record` & `Tuple`\n",
                        "nameHtml": "<code>Record</code> &amp; <code>Tuple</code>\n",
                        "nameClean": "Record  Tuple",
                        "description": "Two deeply immutable data structures.",
                        "descriptionClean": "Two deeply immutable data structures.",
                        "id": "js_record_tuple",
                        "entityType": "feature",
                        "resources": [
                          {
                            "url": "https://github.com/tc39/proposal-record-tuple",
                            "title": "Records & Tuples Proposal"
                          }
                        ]
                      }
                    },
                    {
                      "count": 1315,
                      "id": "js_observable",
                      "percentageQuestion": 18.71,
                      "percentageSurvey": 13.67,
                      "entity": {
                        "name": "`Observable`\n",
                        "nameHtml": "<code>Observable</code>\n",
                        "nameClean": "Observable",
                        "description": "A type that can be used to model push-based data sources such as DOM events, timer intervals, and sockets.",
                        "descriptionClean": "A type that can be used to model push-based data sources such as DOM events, timer intervals, and sockets.",
                        "id": "js_observable",
                        "entityType": "feature",
                        "resources": [
                          {
                            "url": "https://github.com/tc39/proposal-observable",
                            "title": "Observable Proposal"
                          }
                        ]
                      }
                    },
                    {
                      "count": 953,
                      "id": "js_structs",
                      "percentageQuestion": 13.56,
                      "percentageSurvey": 9.9,
                      "entity": {
                        "name": "JavaScript Structs",
                        "nameClean": "JavaScript Structs",
                        "description": "Enable high-performance applications by unlocking shared memory multithreading.",
                        "descriptionClean": "Enable high-performance applications by unlocking shared memory multithreading.",
                        "id": "js_structs",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "struct Box {\n  constructor(x) { this.x = x; }\n  x;\n}\n\nlet box = new Box(0);\nbox.x = 42;  // x is declared\nbox.y = 42;  // error\n",
                          "codeHighlighted": "struct <span class=\"hljs-title class_\">Box</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">x</span>) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> = x; }\n  x;\n}\n\n<span class=\"hljs-keyword\">let</span> box = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Box</span>(<span class=\"hljs-number\">0</span>);\nbox.<span class=\"hljs-property\">x</span> = <span class=\"hljs-number\">42</span>;  <span class=\"hljs-comment\">// x is declared</span>\nbox.<span class=\"hljs-property\">y</span> = <span class=\"hljs-number\">42</span>;  <span class=\"hljs-comment\">// error</span>"
                        },
                        "resources": [
                          {
                            "url": "https://github.com/tc39/proposal-structs",
                            "title": "JavaScript Structs Proposal"
                          }
                        ]
                      }
                    },
                    {
                      "count": 625,
                      "id": "js_async_context",
                      "percentageQuestion": 8.89,
                      "percentageSurvey": 6.49,
                      "entity": {
                        "name": "Async Context",
                        "nameClean": "Async Context",
                        "description": "APIs to propagate a value through asynchronous code, such as a promise continuation or async callbacks.",
                        "descriptionClean": "APIs to propagate a value through asynchronous code, such as a promise continuation or async callbacks.",
                        "id": "js_async_context",
                        "entityType": "feature",
                        "resources": [
                          {
                            "url": "https://github.com/tc39/proposal-async-context",
                            "title": "Async Context Proposal"
                          }
                        ]
                      }
                    },
                    {
                      "count": 488,
                      "id": "js_get_or_insert",
                      "percentageQuestion": 6.94,
                      "percentageSurvey": 5.07,
                      "entity": {
                        "name": "`map.getOrInsert()`\n",
                        "nameHtml": "<code>map.getOrInsert()</code>\n",
                        "nameClean": "map.getOrInsert()",
                        "description": "Checking if a key is present, and then inserting or updating depending upon the result, in a single call.",
                        "descriptionClean": "Checking if a key is present, and then inserting or updating depending upon the result, in a single call.",
                        "id": "js_get_or_insert",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "// Using getOrInsert\nlet prefs = new getUserPrefs();\nprefs.getOrInsert(\"useDarkmode\", true); // default to true\n",
                          "codeHighlighted": "<span class=\"hljs-comment\">// Using getOrInsert</span>\n<span class=\"hljs-keyword\">let</span> prefs = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">getUserPrefs</span>();\nprefs.<span class=\"hljs-title function_\">getOrInsert</span>(<span class=\"hljs-string\">&quot;useDarkmode&quot;</span>, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// default to true</span>"
                        },
                        "resources": [
                          {
                            "url": "https://github.com/tc39/proposal-upsert",
                            "title": "Upsert Proposal"
                          }
                        ]
                      }
                    },
                    {
                      "count": 239,
                      "id": "js_extractors",
                      "percentageQuestion": 3.4,
                      "percentageSurvey": 2.48,
                      "entity": {
                        "name": "Extractors",
                        "nameClean": "Extractors",
                        "description": "A mechanism for executing user-defined logic during destructuring.",
                        "descriptionClean": "A mechanism for executing user-defined logic during destructuring.",
                        "id": "js_extractors",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "let Foo(a, { b }, [c]) = x;\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Foo</span>(a, { b }, [c]) = x;"
                        },
                        "resources": [
                          {
                            "url": "https://github.com/tc39/proposal-extractors",
                            "title": "Extractors Proposal"
                          }
                        ]
                      }
                    },
                    {
                      "count": 207,
                      "id": "js_iterator_chunking",
                      "percentageQuestion": 2.94,
                      "percentageSurvey": 2.15,
                      "entity": {
                        "name": "Iterator Chunking",
                        "nameClean": "Iterator Chunking",
                        "description": "A way to transform an iterator into subsequences of configurable size.",
                        "descriptionClean": "A way to transform an iterator into subsequences of configurable size.",
                        "id": "js_iterator_chunking",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const digits = () => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].values();\n\nlet chunksOf2 = Array.from(digits().chunks(2));\n// [ [0, 1], [2, 3], [4, 5], [6, 7], [8, 9] ]\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">digits</span> = (<span class=\"hljs-params\"></span>) =&gt; [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>].<span class=\"hljs-title function_\">values</span>();\n\n<span class=\"hljs-keyword\">let</span> chunksOf2 = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-title function_\">digits</span>().<span class=\"hljs-title function_\">chunks</span>(<span class=\"hljs-number\">2</span>));\n<span class=\"hljs-comment\">// [ [0, 1], [2, 3], [4, 5], [6, 7], [8, 9] ]</span>"
                        },
                        "resources": [
                          {
                            "url": "https://github.com/tc39/proposal-iterator-chunking",
                            "title": "Iterator Chunking Proposal"
                          }
                        ]
                      }
                    },
                    {
                      "count": 2594,
                      "id": "no_answer",
                      "percentageQuestion": 0,
                      "percentageSurvey": 26.96
                    },
                    {
                      "count": 133,
                      "id": "other_answers",
                      "percentageQuestion": 1.9,
                      "percentageSurvey": 1.37,
                      "groupedBuckets": [
                        {
                          "count": 32,
                          "id": "cutoff_answers",
                          "percentageQuestion": 0.46,
                          "percentageSurvey": 0.32
                        },
                        {
                          "count": 101,
                          "id": "no_match",
                          "percentageQuestion": 1.44,
                          "percentageSurvey": 1.05,
                          "isFreeformData": true
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}